<project name="lib.rtcomm.clientjs" default="build" basedir=".">
   <!-- This is a JavaScript Module Build file.  There are a few properties
   that need to be specified in the 'JavaScript Module Custom Properties' 
   section.  In general, how it works is that given a 'js.source.dir'
   it will take all subdirectories and presume they are a 'submodules'.
   
   The structure for the modules is:
   
   jsBuild.properties - Used to define dependencies and returns for UMD modules.  Also used 
      to define load order when building the SingleFile version of the PackageName.
   
   ModuleGlobals.js  - Functions/variables Global to the MODULE.
   *.js - Generally should be a CLASS. MUST Start w/ a Capital letter to be included in the Module
   
   The UMD format we are using makes the modules AMD & node.js compatible (though they are
   browser modules in this project so may not work in node ) They also will export as 
   a global on ${namespace}.${package_name}.${module_name}.  
   
   The format of the files comes from build_resources/umdTemplate.js for the UMD Modules
   and singleFileTemplate for the packages final SINGLE UMD Module (which includes all other
   modules)
   
   For the com.ibm.ws.rtcomm.client project, this means that "ibmr" is the NAMESPACE, the PACKAGENAME
   is 'rtcomm' and each of the modules will be 'util', 'rtcservice' & 'webrtc'.  Files in the PACKAGENAME
   directory are used to build the final combined UMD Module.
   
   As of 4/24/2014, these are produced as 3 separate 'UMD Module' files for Unit & FAT testing. The final packaging
   is in the rtcomm.js which includes everything.
   -->
   <import file="build_resources/imports/jsdoc3.xml"/>

   <taskdef resource="net/sf/antcontrib/antcontrib.properties">
    <classpath>
      <pathelement location="~/was.build/ant-contrib/ant-contrib-1.03b.jar"/>
    </classpath>
  </taskdef>

	 <!-- JavaScript Module custom properties -->
	
	 <!-- Our master module name --> 
	 <property name="js.namespace" value="ibm" />
	 <property name="package.name" value="rtcomm" />
	 <!-- Build properties, should be no need to change -->
   <property name="build.dir" value="./build" />
	 <property name="js.umdmodule.dir" value="${build.dir}/js/umd/${js.namespace}/${package.name}" />
   <property name="js.packagelib.file" value="${build.dir}/js/${js.namespace}/${package.name}.js" />
	 <property name="js.source.dir" value="${basedir}/src/" />
	
	<property name="js.packagesrc.dir" value="${js.source.dir}/${package.name}" />
	
	
	<property name="publish.files.dir" value="${basedir}/publish/files" />
	 <property name="build.resources" value="${basedir}/build_resources" />
	 <property name="publish.clients.rtcomm" value="${liberty.lib.dir}/../clients/rtcomm" />
	 <property name="temp.contents" value="${build.dir}/tmp" />
	
	
	<!-- Override for jslint to work -->
  <property name="scan.dir" value="${js.umdmodule.dir}/../../ibm" />
	
	<!-- Override for jsdoc to work -->
	<property name="jsdoc.src.dir" value="${build.dir}/js/ibm" />
	<property name="jsdoc.readme.md" value="${basedir}/README.md" />
	
    <!-- If there is a directory under the main source dir then it is a subModule 
	    we will cat all the files in the directory into a FILE named after the directory 
	    We expect moduleHeader.js, moduleGlobals.js, moduleFooter.js
	    Anything else should be classes that goes in between.
	    -->
    <target name="umdModule" >
	     <var name="module" unset="true"/>
	     <var name="umd.contents" unset="true" /> 
	 	   <basename property="module" file="${mod.dir}" />
       <echo message="Building umdModule ${module}" />
       <delete file="${build.dir}/tmp/${module}-contents" /> 
	      	<concat destfile="${build.dir}/tmp/${module}-contents" fixlastline="yes" append="true" >
             <filelist dir="${js.packagesrc.dir}/${module}" files="ModuleGlobals.js" />
	 	         <fileset id='contents' dir="${js.packagesrc.dir}/${module}" >
	 	             <filename regex="^[A-Z]\S+\.js" />
                  <not>
                    <filename name="ModuleGlobals.js" />
                  </not>
	 	         </fileset>
	 	      </concat>
	     <loadfile  property="umd.contents"  srcFile="${build.dir}/tmp/${module}-contents" />
	 	  <!-- Template and replace everything ... -->
	 	            <copy file="${build.resources}/umdTemplate.js" tofile="${js.umdmodule.dir}/${module}.js">
	 	               <filterchain>
	 	                 <filterreader classname="org.apache.tools.ant.filters.ReplaceTokens">
	 	                     <param type="propertiesfile" value="${js.packagesrc.dir}/${module}/jsBuild.properties"/>
	 	                 </filterreader>
	 	                 <replacetokens>
	 	                      <token key="NAMESPACE" value="${js.namespace}"/>
	 	                 </replacetokens> 
	 	                 <replacetokens>
	 	                     <token key="PACKAGE" value="${package.name}"/>
	 	                 </replacetokens> 
	 	                 <replacetokens>
	 	                     <token key="MODULENAME" value="${module}"/>
	 	                 </replacetokens>  
	 	                <replacetokens>
	 	                    <token key="CONTENTS" value="${umd.contents}"/>
	 	                </replacetokens>  
	 	               </filterchain> 
	 	            </copy>
    </target>

	 <target name="umdModules" depends="clean-js"
	      description="Build UMD JavaScript SubModules" >
	      <echo message="Building SubModules" />
	      <dirset id="mod.dirs" dir="${js.packagesrc.dir}" includes="*" />
	      <delete dir="${js.umdmodule.dir}"/>
	      <mkdir dir="${js.umdmodule.dir}" />
	 	 <!-- Build the subModules -->
	 	 <foreach target="umdModule" param="mod.dir"> 
       <path>
          <dirset dir="${js.packagesrc.dir}">
               <include name="*"/>
          </dirset>
      </path>
	   </foreach>
	 	 <!-- Make master Package.name Module -->
     <delete file="${build.dir}/tmp/${package.name}-umdcontents" /> 
	 	 <concat destfile="${build.dir}/tmp/${package.name}-umdcontents" fixlastline="yes" append="true" >
	      <fileset id='contents' dir="${js.packagesrc.dir}/" >
	          <filename regex="^[A-Z]\S+\.js" />
	       </fileset>
	   </concat>
	       <loadfile  property="contents"  srcFile="${build.dir}/tmp/${package.name}-umdcontents" />
	      <!-- Template and replace everything ... -->
	                <copy file="${build.resources}/umdTemplate.js" tofile="${js.umdmodule.dir}/../${package.name}.js" overwrite="true" >
	                   <filterchain>
	                     <filterreader classname="org.apache.tools.ant.filters.ReplaceTokens">
	                         <param type="propertiesfile" value="${js.packagesrc.dir}/jsBuild.properties"/>
	                     </filterreader>
	                     <replacetokens>
	                          <token key="NAMESPACE" value="${js.namespace}"/>
	                     </replacetokens> 
	                     <replacetokens>
	                         <token key="PACKAGE" value="${package.name}"/>
	                     </replacetokens> 
	                     <replacetokens>
	                         <token key="MODULENAME" value="${package.name}"/>
	                     </replacetokens>  
	                    <replacetokens>
	                        <token key="CONTENTS" value="${contents}"/>
	                    </replacetokens>  
	                   </filterchain> 
	                </copy>
	                <echo message="Finished building ${package.name} --> ${js.umdmodule.dir}/../${package.name}.js"/>
</target>


  <target name="subContent">
          <var name="module" unset="true"/>
          <var name="sf.contents" unset="true" /> 
        	<var name="content.file" unset="true" />
          <basename property="module" file="${mod.dir}" />
    	    
        	<property name="content.file" value="${build.dir}/tmp/${module}-2contents"/>
             <concat destfile="${content.file}" fixlastline="yes" append="true" >
                <filelist dir="${js.packagesrc.dir}/${module}" files="ModuleGlobals.js" />
                <fileset id='contents' dir="${js.packagesrc.dir}/${module}" >
                    <filename regex="^[A-Z]\S+\.js" />
                    <not>
                      <filename name="ModuleGlobals.js" />
                    </not>
                </fileset>
             </concat>
          <loadfile  property="sf.contents"  srcFile="${content.file}" />
    	 	 <delete file="${content.file}" /> 
         <!-- Template and replace everything ... -->
                   <copy file="${sflib.template.file}" tofile="${temp.contents}/sub/${module}">
                      <filterchain>
                        <filterreader classname="org.apache.tools.ant.filters.ReplaceTokens">
                            <param type="propertiesfile" value="${js.packagesrc.dir}/${module}/jsBuild.properties"/>
                        </filterreader>
                        <replacetokens>
                             <token key="NAMESPACE" value="${js.namespace}"/>
                        </replacetokens> 
                      	<replacetokens>
                      	      <token key="PACKAGE" value="${package.name}"/>
                        </replacetokens> 
                        <replacetokens>
                            <token key="MODULENAME" value="${module}"/>
                        </replacetokens>  
                       <replacetokens>
                           <token key="CONTENTS" value="${sf.contents}"/>
                       </replacetokens>  
                      </filterchain> 
                   </copy>
                   <echo message="Finished building ${module}"/>
  </target>

    <target name="subContents" 
      description="Build subContents for SingleModule" >
      <echo message="Building SubContents" />
    	<delete dir="${temp.contents}/sub"/>
    	<mkdir dir="${temp.contents}/sub" />
    	
	 	 <foreach target="subContent" param="mod.dir"> 
       <param name="sflib.template.file" value="${build.resources}/sfLibTemplate.js" />
       <path>
          <dirset dir="${js.packagesrc.dir}">
               <include name="*"/>
          </dirset>
      </path>
	   </foreach>
    </target>
	
   <target name="singleModule" depends="subContents"
	      description="Build single Module" >
           <echo message="Building Single Module" />
       <property name="sf.template.file" value="${build.resources}/singleFileTemplate.js" />
       <property name="single.content.file" value="${temp.contents}/${package.name}-contents" />
   	   <loadproperties srcFile="${js.packagesrc.dir}/jsBuild.properties" />
   	   <echo message="content file is: ${single.content.file}, template.file is: ${sf.template.file}" />
  	   <echo message="Load Order!: ${LOADORDER}" />
   	<!-- create Contents --> 
       <delete file="${single.content.file}" />
              <concat destfile="${single.content.file}" fixlastline="yes" append="true" >
              	 <filelist 
              	     id="loadorder"
              	          dir="${temp.contents}/sub"
              	          files="${LOADORDER}" />
              	
              	 <!-- Any files in main Dir are the Main Classes -->
              	 <fileset dir="${js.packagesrc.dir}" >
              	     <filename regex="^[A-Z]\S+\.js" />
              	 </fileset>
             </concat> 
  
         <loadfile  property="single.contents"  srcFile="${single.content.file}" />
         <!-- Template and replace everything ... -->
                   <copy file="${sf.template.file}" tofile="${js.packagelib.file}">
                      <filterchain>
                        <filterreader classname="org.apache.tools.ant.filters.ReplaceTokens">
                            <param type="propertiesfile" value="${js.packagesrc.dir}/jsBuild.properties"/>
                        </filterreader>
                        <replacetokens>
                             <token key="NAMESPACE" value="${js.namespace}"/>
                        </replacetokens> 
                        <replacetokens>
                            <token key="MODULENAME" value="${package.name}"/>
                        </replacetokens>  
                       <replacetokens>
                           <token key="CONTENTS" value="${single.contents}"/>
                       </replacetokens>  
                      </filterchain> 
                   </copy>
                   <echo message="Finished building ${package.name} --> ${js.packagelib.file}"/>
     </target>
	
	<target name='sample'>
		
	</target>

  <target name="copyFilesToBuildDir" >
		<!-- Copy the lib dir to build -->
		<delete dir="${build.dir}/js/lib"/>
		    <mkdir dir="${build.dir}/js/lib" />
        <copy todir="${build.dir}/js/lib" >
          <fileset dir="${basedir}/lib" />
		    </copy>
		        <!-- Copy the sample dir -->
		          <delete dir="${build.dir}/sample"/>
		          <mkdir dir="${build.dir}/sample"/>
		          <copy todir="${build.dir}/sample" >
		             <fileset dir="${basedir}/sample">
		             	  <exclude name="__*.*" />
		             </fileset>
		          </copy>
		          <copy file="${basedir}/README.md" todir="${build.dir}" overwrite="true" verbose="true"/> 
		          <copy file="${basedir}/doc/index.html" todir="${build.dir}" overwrite="true" verbose="true"/> 
	</target>
	
		
	<target name="package-js" depends="copyFilesToBuildDir" >
	  <delete file="${build.dir}/lib/${package.name}.zip"/>
		<zip destfile="${build.dir}/lib/${package.name}.zip">
			<fileset dir="${build.dir}">
			 <include name="README.md" />
			 <include name="index.html" />
			 <include name="js/" />
			 <exclude name="**/umd/**" />
			 <include name="docs/" />
			 <include name="sample/" />
			 <exclude name="lib/*.zip" />
			</fileset>
			</zip>
	</target>
  <!-- create a release version of the rtcomm.zip file, will be used to 'release' -->
  <target name="release" depends="build" >
    <property name="release.name" value="${package.name}-${version}" />
    <mkdir dir="${build.dir}/tmp/${release.name}" />
    <unzip src="${build.dir}/lib/${package.name}.zip" dest="${build.dir}/tmp/${release.name}" />
		<zip destfile="${build.dir}/lib/${release.name}.zip">
      <fileset dir="${build.dir}/tmp/">
        <include name="${release.name}/" />
      </fileset>
    </zip>
    <!-- remove the temp dir -->
    <delete dir="${build.dir}/tmp/${release.name}" />
  </target>

	<!-- Override -->
  
	<target name="clean-js" >
	 <delete dir="${temp.contents}" />
	 <delete dir="${js.umdmodule.dir}" />
	 <delete file="${js.packagelib.file}" /> 
	</target>
 
	
	 <!-- Override the default compile target -->
	  <target name="compile" depends="compile-js" />

	  <!-- Replace jslint with jshint. jslint is too strict... -->
	  <target name="compile-js" depends="clean, umdModules, singleModule, copyFilesToBuildDir" />
    
    <target name="buildLite" depends="clean, umdModules, singleModule, copyFilesToBuildDir" />

	  <!-- override package -->
	  <target name="package" depends="package-js" />

    <target name="build" depends="compile-js, rtcommJsdoc, package" />
    <target name="clean" depends="clean-js" />
	
</project>
